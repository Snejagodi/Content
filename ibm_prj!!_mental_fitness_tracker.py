# -*- coding: utf-8 -*-
"""IBM prj!! MENTAL FITNESS TRACKER

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17uJ6So4Uzvj9RssGQmKECmw0RTh_Wiie
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

am1 = pd.read_csv("/content/drive/MyDrive/collab /prevalence-by-mental-and-substance-use-disorder.csv")
am2 = pd.read_csv("/content/drive/MyDrive/collab /mental-and-substance-use-as-share-of-disease (1).csv")

am1.head()

am2.head(10)

data = pd.merge(am1,am2)
data.head(10)

data.isnull().sum()

data.drop('Code',axis=1,inplace=True)

data.head(10)

data.size,data.shape

data.set_axis(['Country', 'Year', 'Schizophrenia', 'Bipolar_disorder', 'Eating_disorder', 'Anxiety', 'drug_usage', 'depression', 'alcohol', 'mental_fitness'], axis='columns', inplace=True)

data.head(10)

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap='Reds')
plt.plot()

sns.pairplot(data,corner=True)
plt.show()

mean = data['mental_fitness'].mean()
mean

fig = px.pie(data,values='mental_fitness',names='Year')
fig.show()

fig = px.line(data,x ="Year",y="mental_fitness",color='Country',markers=True,color_discrete_sequence=['red','blue'],template='plotly_dark')
fig.show()

df = data.copy()

data.info()

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in df.columns:
    if df[i].dtype == 'object':
        df[i]=l.fit_transform(df[i])

df.shape

x = df.drop('mental_fitness',axis=1)
y = df['mental_fitness']

from sklearn.model_selection import train_test_split
xtrain, xtest,ytrain,ytest = train_test_split(x,y, test_size=.20,random_state=2)

df.head()

print("xtrain: ",xtrain.shape)
print("xtest: ",xtest.shape)
print("\n ytrain: ",ytrain.shape)
print("ytest: ",ytest.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score
lr = LinearRegression()
lr.fit(xtrain,ytrain)

ytrain_pred = lr.predict(xtrain)
mse = mean_squared_error(ytrain,ytrain_pred)
rmse =(np.sqrt(mean_squared_error(ytrain,ytrain_pred)))
r2 = r2_score(ytrain,ytrain_pred)

print("The Linear Regression model performance for training set")
print("-------------------------------")
print('MSE is{}'.format(mse))
print('RMSE is{}'.format(rmse))
print('R2 score is{}'.format(r2))

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create an instance of the RandomForestRegressor
rf = RandomForestRegressor()

# Fit the model to the training data
rf.fit(xtrain, ytrain)

# Make predictions on the training data
ytrain_pred = rf.predict(xtrain)

# Calculate the evaluation metrics
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = np.sqrt(mse)
r2 = r2_score(ytrain, ytrain_pred)

# Print the performance metrics
print("The Random Forest Regressor model performance for the training set")
print("-----------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score


# Linear Regression model instantiation
lr = LinearRegression()

# Fit the model to the training data
lr.fit(xtrain, ytrain)

# Linear Regression model evaluation
ytest_pred = lr.predict(xtest)
mse = mean_squared_error(ytest, ytest_pred)
rmse = np.sqrt(mse)
r2 = r2_score(ytest, ytest_pred)

print("The Linear Regression model performance for the testing set")
print("-----------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

# Random Forest Regressor model evaluation
ytest_pred = rf.predict(xtest)
mse = mean_squared_error(ytest, ytest_pred)
rmse = np.sqrt(mse)
r2 = r2_score(ytest, ytest_pred)

print("\n\nThe Random Forest Regressor model performance for the testing set")
print("----------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))